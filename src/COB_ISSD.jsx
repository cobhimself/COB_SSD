/** * @fileoverview An Image Sequence Section Deletor script. * * The point of this application is to allow the user to easily and quickly * delete a selected sequence of files directly from After Effects. It is most * useful when having to delete only a section of an image sequence for * re-render. * * Copyright 2011 Collin D Brooks <collin.brooks@gmail.com> * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *   http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. * * @author Collin D Brooks <collin.brooks@gmail.com> * @version 4 *//*jslint white: true, onevar: true, undef: true, newcap: true, nomen: true, regexp: true, plusplus: true, bitwise: true, maxerr: 50, maxlen: 79, indent: 4 */                 /*global app, $, File, Folder, alert, prompt, clearOutput, writeLn, write,confirm, Window, Panel, localize*//** * The main COB.ISSD namespace * @namespace */var COB = COB || {};COB.ISSD = (function ISSD (globalObj) { // Public Properties: //----------------------------------------------------------------------------     this.version = "5.0";    this.scriptName = "Image Sequence Section Deleter";    this.author = "Collin Brooks <collin.brooks@gmail.com>";    this.myOSSlash = ($.os.indexOf("Mac") !== -1) ? "/" : "\\";    this.defaultFileLocation = "";    //The location of the is once it's been selected     this.myRelativeLocation = "";    //The name of the image sequence     this.mySequenceName = "";    //The location and name of the is without numbers or extension     this.myIS = "";    this.myFirstFrame = null;    this.myLastFrame = null;    //The extension of the is files     this.myExtension = "";    this.myDigits = 0;    this.currentPercentage = 0;    //The render queue item object the user has selected to reference     this.myRQItem = "";    //The render queue item's output module object the user    //has selected to reference     this.myOutputMod = ""; // Private Properties://----------------------------------------------------------------------------    var that = this,        lang = {            browsePanelTitle: {en: "Image Sequence"},            defaultISLocText: {en: "Browse for the sequence"},            browseButton: {en: "Browse..."},            toolsPanel: {en: "Tools"},            getRQItem: {en: "Get RQ Item Path"},            getWorkArea: {en: "Get Work Area"},            sectionSelPanel: {en: "Section Selection"},            sectionBegin: {en: "Section Begin"},            sectionEnd: {en: "Section End"},            performTest: {en: "Perform Test Only"},            deleteButton: {en: "Perform Delete"},            omNumPrompt: {en: "Enter in the number of the RQ " +                "Item's Output Module:"},            selectIS: {en: "Select the first file of the image sequence:"},            helpButton: {en: "Help"},            rqNumPrompt: {en: "Enter in the number of the Render Queue " +                "Item's Index:"},            deletingSegment: {en: "DELETING SEGMENT:"},            percentComplete: {en: "% COMPLETE:"},            wouldHaveDeleted: {en: "%1 file(s) would have been deleted. " +                "%2 file(s) would have been skipped."},            deleted: {en: "%1 file(s) deleted. %2 file(s) skipped."},            confirmDelete: {en: "Are you sure you want to delete " +                "this sequence section?"},            help: {en: that.scriptName + " " + that.version + " Help\n\n" +                "The point of this application is to allow the user " +                "to easily and quickly delete a selected sequence of " +                "files directly from After Effects. It is most useful " +                "when having to delete only a section of an image sequence " +                "for re-render. Follow the steps below:\n\n" +                "1. Click on Browse and select any file from a file sequence" +                " (such as an Image Sequence). By doing this, you are " +                "telling the application what sequence of files it is " +                "working with.\n" +                "2. Define the boundaries of the section you want to delete " +                "by entering in the numbers of the first and last files " +                "in the sequence in the spaces provided.\n" +                "3. Review your input and then click on \"Perform Delete\". " +                "In the info window, the current percentage of " +                "the process is displayed.\n\nTool Descriptions:\n\n" +                "1. Get RQ Item Path: Allows you to select a render " +                "queue item and have the path that it is set to render " +                "to be used as the image sequence " +                "you are wanting to reference.\n" +                "2. Get Work Area: After making a composition an active " +                "item, this allows you to have the section begin " +                "and section end input fields " +                "set to the in and out time of the work area.\n" +                "3. Perform Test Only: Allows you to see the " +                "results of the opperation " +                "without actually deleting any files.\n" +                "\nImportant Info:\n\n" +                "-This application has some precautionary measures " +                "that prevent bad user input (such as characters " +                "instead of numbers, an ending number less than " +                "the beginning number, skipping files that don't " +                "exist, and selecting files " +                "from a different file sequence than the sequence " +                "given). However, the author of this application can " +                "in no way be held liable for any damage that this script " +                "may cause. Use at your own risk.\n" +                "-As of now, this script can only work with file " +                "sequences that follow the default template that " +                "After Effects creates when defining sequences: " +                "Image_Name_[#####].ext. It does not matter how " +                "many digits there are in the numbering of the files, " +                "but the numbers must be directly after an underscore " +                "(\"_\") and before an extension.\n" +                 "-You are asked to verify that you really want " +                "to delete the sequence you've specified. Once you " +                "perform the delete, the files cannot be retrieved " +                "by easy means since the files do not go to the " +                "recycle bin. Use wisely.\n" +                "\nContact Information:\n\n" +                "Contact collin.brooks at gmail.com with " +                "comments/suggestions.\n" +                "**This script can be duplicated and distributed freely " +                "as long as this help text and contact information remain " +                "intact and coupled with this script."}        },        error = {            NON_VALID_RQ_ITEM: {en: "The number you entered is not a valid " +                "render queue item."},            NON_VALID_SEQUENCE: {en: "It doesn't seem like the path " +                "is a valid sequence."},            NO_ACTIVE_COMP: {en: "Please select the composition whose " +                "work area you would like to get and then retry."},            EMPTY_FRAME_VALUE: {en: "Both the beginning and ending " +                "frames must be set"},            START_FRAME_BGT_STOP: {en: "Ending image number must be " +                    "greater than the beginning " +                    "image number (%1)"},            FRAMES_NAN: {en: "Frame Values must be numbers!"}        };// Public Methods://----------------------------------------------------------------------------    this.UI = (function showUI() {        var that = this,            winGfx,            darkColorBrush,            g, //Local pointer to thePal.grp            res,            l = localize, //Shorthand for localize            /* UI */            thePal = (globalObj instanceof Panel) ?                globalObj :                new Window("palette",                    localize(that.scriptName + " " + that.version),                    undefined,                    {resizeable: false}                    );        if (thePal !== null) {            //UI RESOURCE SETUP            res =                "group {orientation: 'column', margins:-8, " +                    "browsePanel: Panel {" +                        "text: '" + l(lang.browsePanelTitle) + "'," +                        "orientation: 'row'," +                        "alignment: ['fill','fill']," +                        "alignChildren: ['fill', 'bottom']," +                        "margins:10," +                        "ISLocation: StaticText {" +                            "size: [220,20]," +                            "text: '" + l(lang.defaultISLocText) + "'" +                        "}," +                        "browseButton: Button {" +                            "text: '" + l(lang.browseButton) + "'," +                        "}" +                    "}," +                    "one: Group {" +                        "orientation: 'row'," +                        "alignment: ['fill', 'fill']," +                        "toolsPanel: Panel {" +                            "text: '" + l(lang.toolsPanel) + "'," +                            "orientation:'column'," +                            "getRQItemPathButton: Button {" +                                "text: '" + l(lang.getRQItem) + "'," +                                "alignment: ['fill','fill']" +                            "}" +                            "getWorkAreaButton: Button {" +                                "text: '" + l(lang.getWorkArea) + "'," +                                "alignment: ['fill', 'fill']" +                            "}" +                        "}," +                        "sectionSelectionPanel: Panel {" +                            "text: '" + l(lang.sectionSelPanel) + "'," +                            "orientation: 'column'," +                            "alignment: ['fill','fill']," +                            "row1: Group {" +                                "orientation:'row'," +                                "alignment: ['fill','fill']," +                                "sectionBeginStaticText: StaticText {" +                                    "text: '" +                                        l(lang.sectionBegin) +                                        "'," +                                    "alignment: ['right', 'middle']" +                                "}," +                                "sectionBegin: EditText {" +                                    "size: [50,20]," +                                    "alignment: ['right', 'middle']" +                                "}," +                            "}," +                            "row2: Group {" +                                "orientation: 'row'," +                                "alignment: ['fill','fill']," +                                "sectionEndStaticText: StaticText {" +                                    "text: '" +                                        l(lang.sectionEnd) +                                    "'," +                                    "alignment: ['right', 'middle']}," +                                "sectionEnd: EditText {" +                                    "size:[50,20]," +                                    "alignment: ['right', 'middle']" +                                "}" +                            "}" +                        "}" +                    "}," +                    "two: Group {" +                        "orientation:'row'," +                        "alignment: ['fill','fill']," +                        "testOnlyCheckbox: Checkbox {" +                            "text: '" + l(lang.performTest) + "'" +                        "}," +                        "buttonGroup: Group {" +                            "orientation: 'row'," +                            "performDeleteButton: Button {" +                                "text: '" +                                    l(lang.deleteButton) +                                "'" +                            "}," +                            "helpButton: Button {" +                                "text: '" + l(lang.helpButton) + "'" +                            "}," +                        "}," +                        "status: StaticText {" +                            "text: ''," +                            "orientation:'row'," +                            "alignment: ['fill', 'fill']" +                        "}" +                    "}" +                "}";            g = thePal.add(res);                        thePal.layout.layout(true);            thePal.onResizing = thePal.onResize = function () {                this.layout.resize();            };            //g.progressBar.visible = false;            //g.status.visible = false;            // Workaround to ensure the edittext text color is black,            // even at darker UI brightness levels            winGfx = thePal.graphics;            darkColorBrush = winGfx.newPen(                winGfx.BrushType.SOLID_COLOR,                [0, 0, 0],                1            );                        /*g.browsePanel.ISLocation.graphics.*/                    /*foregroundColor = darkColorBrush;*/            /*g.one.sectionSelectionPanel.row1.sectionBegin.*/                    /*graphics.foregroundColor = darkColorBrush;*/            /*g.one.sectionSelectionPanel.row2.sectionEnd.*/                    /*graphics.foregroundColor = darkColorBrush;*/                            }        //Public methods        return {            show: function () {                if (thePal instanceof Window) {                    thePal.center();                    thePal.show();                } else {                    thePal.layout.layout(true);                }            },                                                                        browseFunc: function (f) {                g.browsePanel.browseButton.onClick = f;            },            getRQItemPathFunc: function (f) {                g.one.toolsPanel.getRQItemPathButton.onClick = f;            },            getWorkAreaFunc: function (f) {                g.one.toolsPanel.getWorkAreaButton.onClick = f;            },            performDeleteFunc: function (f) {                g.two.buttonGroup.performDeleteButton.onClick = f;            },            helpFunc: function (f) {                g.two.buttonGroup.helpButton.onClick = f;            },            setISLocation: function (t) {                g.browsePanel.ISLocation.text = t;            },            setISLocationHelpTip: function (t) {                g.browsePanel.ISLocation.helpTip = t;            },            setStartFrame: function (f) {                g.one.sectionSelectionPanel.row1.                        sectionBegin.text = f;            },            setEndFrame: function (f) {                g.one.sectionSelectionPanel.row2.                        sectionEnd.text = f;            },            getStartFrame: function () {                return g.one.sectionSelectionPanel.row1.sectionBegin.text;            },            getEndFrame: function () {                return g.one.sectionSelectionPanel.row2.sectionEnd.text;            },            testOnly: function () {                return g.two.testOnlyCheckbox.value;            }        };    }());// Private Methods://----------------------------------------------------------------------------    function updateISLocation(seqName, path, digits, ext) {        var digitString = "", i;        //generate the digits string        for (i = digits; i > 0; i -= 1) {            digitString += "#";        }        seqName = seqName + "[" + digitString + "]" + ext;        that.UI.setISLocation(seqName);        that.UI.setISLocationHelpTip(path);    }    function updateStatus(t) {        //thePal.status.text = t;    }    function help() {        alert(localize(lang.help));    }    function trimZeros(number, digits) {        var i = 0,            numBeginSpot = 0;        while (number.substring(i, i + 1) === "0") {            numBeginSpot += 1;            i += 1;        }        if (number.length === numBeginSpot) {            return 0;        } else {            return parseInt(number.substring(numBeginSpot, number.length), 10);        }    }    function returnFrameNum(num, digits) {        var numString = num + '',            numLength = numString.length,            i = 0,            numZeros = digits - numLength,            addZeros = "";        while (i < numZeros) {            addZeros = addZeros + "0";            i += 1;        }        return addZeros + numString;    }    function browse(fileDialogText, folderLocation, limitSelection) {        return File.openDialog(fileDialogText, folderLocation);    }    function getRQItem() {        var myOutputModNum, myRQItemNum;        //Is there only one render queue item?        if (app.project.renderQueue.numItems === 1) {            //If there is only one render queue item            myRQItemNum = 1;        } else {            //Determin the render queue item to use            myRQItemNum = prompt(localize(lang.rqNumPrompt), "");        }        if (myRQItemNum === null) {            //The user cancelled the dialog. Return false            return false;        } else if (myRQItemNum > app.project.renderQueue.numItems ||                myRQItemNum <= 0) {            //The number entered is not a valid render queue item            alert(localize(error.NON_VALID_RQ_ITEM));            return false;        } else {            //Determine the render queue item based upon the number entered            myRQItemNum = parseInt(myRQItemNum, 10);            myRQItem = app.project.renderQueue.item(myRQItemNum);                        if (myRQItem.numOutputModules !== 1) {                //There is more than one output module,                 //which one should we use?                myOutputModNum = prompt(localize(lang.omNumPrompt));            } else {                myOutputModNum = 1;            }                        if (myOutputModNum === null || myOutputModNum === "") {                //The user cancelled the promp                return false;            } else {                myOutputMod = myRQItem.outputModules[                    parseInt(myOutputModNum, 10)                ];                return true;            }        }    }    function getRQItemPath() {        var extPos, numPos, num, endLocation, sequenceName, relativeLocation,            outputFile;        if (getRQItem() !== false) {            outputFile = File.decode(myOutputMod.file.fsName);                        //alert(outputFile);            if (outputFile !== null && outputFile.lastIndexOf("#") !== -1) {                //CHOP OFF NUMBERS AND EXTENSION                extPos = outputFile.lastIndexOf(".");                numPos = outputFile.lastIndexOf("_");                that.myExtension = outputFile.substring(extPos, outputFile.length);                //alert("My Extension: "+ myExtension);                num = outputFile.substring(numPos + 1, extPos);                that.myDigits = outputFile.match(/#/g).length;                //alert("My Digits: "+ myDigits);                endLocation = outputFile.lastIndexOf(that.myOSSlash);                //alert(endLocation);                sequenceName = File.decode(myOutputMod.file.name);                //alert(File.decode(sequenceName));                that.myRelativeLocation = outputFile.substring(                    0,                    endLocation                ) + that.myOSSlash;                that.mySequenceName = sequenceName.substring(                    0,                    sequenceName.length -                        that.myExtension.length -                        that.myDigits - 2                );                //alert("My Sequence Name: "+ mySequenceName);                //alert("My Relative Location: "+ myRelativeLocation);                that.myIS = that.myRelativeLocation + that.mySequenceName;                //alert("My IS: "+ myIS);                updateISLocation(                    that.myRelativeLocation,                    that.mySequenceName,                    that.myDigits,                    that.myExtension                );            } else {                alert(localize(error.NON_VALID_SEQUENCE));            }        }    }    function getWorkArea() {        var activeComp = app.project.activeItem,            frameDur,            start,            end;                if (activeComp === null) {            alert(localize(error.NO_ACTIVE_COMP));        } else {            frameDur = activeComp.frameDuration;            start = activeComp.workAreaStart;            end = activeComp.workAreaDuration;                        that.UI.setStartFrame(Math.floor(start / frameDur));            that.UI.setEndFrame(                Math.floor(                        (end / frameDur) +                        (start / frameDur)                ) - 1            );        }    }    function getIS() {        var theFile, extPos, numPos, num, endLocation, sequenceName,            relativeLocation;        theFile = browse(localize(lang.selectIS));                if (theFile !== null && theFile !== false) {            theFile = File.encode(theFile);            //CHOP OFF NUMBERS AND EXTENSION            extPos = theFile.lastIndexOf(".");            numPos = theFile.lastIndexOf("_");            num = theFile.substring(numPos + 1, extPos);            endLocation = theFile.lastIndexOf("/");            that.myExtension = theFile.substring(extPos, theFile.length);            that.myDigits = num.length;            that.mySequenceName = theFile.substring(endLocation + 1,                theFile.length - (that.myExtension.length + that.myDigits));            that.myRelativeLocation = new Folder(                theFile.substring(0, endLocation)            ).fsName + that.myOSSlash;            that.myIS = that.myRelativeLocation + that.mySequenceName;            updateISLocation(                that.mySequenceName,                that.myRelativeLocation,                that.myDigits,                that.myExtension            );        }    }    function verifyInput(first, last) {        //CHECK TO MAKE SURE BEGINNING AND ENDING NUMBERS ARE OK        if (last < first) {            alert(localize(error.START_FRAME_BGT_STOP, first));            return false;        } else if (isNaN(first) || isNaN(last)) {            alert(localize(error.FRAMES_NAN));            return false;        }                return true;    }    function displayPercentage(percentage) {        var increment = 10;        if (currentPercentage !== percentage &&                percentage % increment === 0) {            //write(percentage);            updateStatus(percentage);            //if (percentage!=100)            //write(", ");            //currentPercentage = percentage;        }    }    function performDelete() {        var currentPercentage = 0,            filesSkipped = [],            filesDeleted = [],            currentSkippedFile = 0,            currentDeletedFile = 0,            percentage = 0,            startNum = parseInt(that.UI.getStartFrame(), 10),            endNum = parseInt(that.UI.getEndFrame(), 10),            f,            sequence,            currentNum,            currentSequenceNum,            currentFile,            alertText,            testOnly = that.UI.testOnly();        clearOutput();        writeLn(localize(lang.deletingSegment));        writeLn(localize(lang.percentComplete));        write("0, ");        //CHECK FRAME NUMBERS        if (verifyInput(startNum, endNum)) {            //BUILD SEQUENCE ARRAY            sequence = [];            currentNum = 0;            for (f = startNum; f <= endNum; f += 1) {                currentSequenceNum = returnFrameNum(f, that.myDigits);                sequence[currentNum] = that.mySequenceName +                    currentSequenceNum + that.myExtension;                currentNum += 1;            }            for (f = 0; f < sequence.length; f += 1) {                percentage = Math.round(((f + 1) / sequence.length) * 100);                /*displayPercentage(percentage);*/                currentFile = new File(that.myRelativeLocation + sequence[f]);                //alert(currentFile.exists);                //DECIDE WHETHER OR NOT TO SKIP OR DELETE                if (currentFile.exists) {                    if (!testOnly) {                        currentFile.remove();                    }                                        filesDeleted[currentDeletedFile] = sequence[f];                    currentDeletedFile += 1;                } else {                    filesSkipped[currentSkippedFile] = sequence[f];                    currentSkippedFile += 1;                }            }            if (testOnly) {                alertText = localize(lang.wouldHaveDeleted,                        currentDeletedFile,                        currentSkippedFile);            } else {                alertText = localize(lang.deleted,                        currentDeletedFile,                        currentSkippedFile);            }            alert(alertText);        }    }    function prepareForDelete() {        var testOnly = that.UI.testOnly();        if (testOnly) {            performDelete();        } else {            if (                confirm(                    localize(lang.confirmDelete)                )            ) {                performDelete();            }        }    }// Main://----------------------------------------------------------------------------    //Setup the UI onClick events    this.UI.browseFunc(getIS);    this.UI.getRQItemPathFunc(getRQItemPath);    this.UI.getWorkAreaFunc(getWorkArea);    this.UI.performDeleteFunc(prepareForDelete);    this.UI.helpFunc(help);    this.UI.show();    return this;}(this));